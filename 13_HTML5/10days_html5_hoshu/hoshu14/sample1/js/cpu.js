// ---------------------------------------------------------------------------------------------------
// 8bit CPUをエミュレート
// ---------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------
// ページが読み込まれたらボタンにイベントを割り当て（ここはJavaScript）
// ---------------------------------------------------------------------------------------------------
window.addEventListener("load", function(){
	// 「以下のマシン語を実行する」ボタンがクリックされた時の処理
	document.getElementById("execButton").addEventListener("click", function(){
		var text = document.getElementById("byteCode").value;
		RAM = text.split(" ");	// 半角空白区切りなので分割してRAMに入れる
		execCPU();	// CPUを0番地から実行
	}, true);
}, true);
// ---------------------------------------------------------------------------------------------------
// 8bit CPU 命令一覧
// ---------------------------------------------------------------------------------------------------
// 00 : NOP（何もせずPC［プログラムカウンタを1つ進めるだけ］）
// 21 : LD HL, nnmm（HLレジスタに次に続く2バイトを入れる）
// 23 : INC HL（HLレジスタの値を1つ増やす）
// 36 : LD (HL), n（HTMLレジスタが示す番地にnの値を書き込む）
// 76 : HALT（CPUの動作を止める。割り込み以外では復帰しない）
// ---------------------------------------------------------------------------------------------------
// 電源ボタンが押された時の処理。RAMの内容を消去
// ---------------------------------------------------------------------------------------------------
var RAM = [];
for(var i=0; i<256; i++){	// 256バイトのRAMをクリア
	RAM[i] = 0;
}
// ---------------------------------------------------------------------------------------------------
// CPUをエミュレート。常に0番地から実行。
// ---------------------------------------------------------------------------------------------------
function execCPU(){
	var PC = 0;	// プログラムカウンタ。最初は0番地から実行
	var HL = 0;	// HLレジスタの内容をクリア
	while(true){
		var code = RAM[PC];	// PCが示す番地から1バイト読み出す。都合により数値でなく文字列になっている（手抜き）
		PC = PC + 1;	// プログラムカウンタを1進める
		if (PC > 256){
			alert("メモリエラー。256バイトまでしか利用できません");
			return;
		}
		//console.log(code+", PC="+PC);
		switch(code){
			case "00":	// NOPの場合（なにもしない）
				break;
			case "21":
				var low = parseInt("0x" + RAM[PC]);
				PC = PC + 1;	// プログラムカウンタを1進める
				var high = parseInt("0x" + RAM[PC]);
				PC = PC + 1;	// プログラムカウンタを1進める
				HL = high * 256 + low;	// 新しい番地（アドレス）を設定する
				break;
			case "23":
				HL = HL + 1;	// HLレジスタの内容を1つ増やす
				break;
			case "36":
				RAM[HL] = parseInt("0x" + RAM[PC]);
				PC = PC + 1;	// プログラムカウンタを1進める
				break;
			case "76":
				return;	// CPUの処理を停止。ここでは呼び出し元に戻す
		}
	}
}
// ---------------------------------------------------------------------------------------------------
// VRAMを画面に表示。0xD0から16文字(バイト)分をVRAMとする
// ---------------------------------------------------------------------------------------------------
// 01がA、02がBとなっている。英文字のみ対応
setInterval(function(){
	var c = "";
	var ele = document.getElementById("VRAM");
	ele.innerHTML = "";	// 一旦画面を全て消去する
	for(var i=0; i<16;	i++){
		var d = RAM[0xD0+i];	// 1バイト読み出す
		if ((d >0) && (d<=26)){
			c = String.fromCharCode(0x40+d);	// 画面に表示できるようにコードを変換
		}else{
			c = "□";	// 英文字以外は空白（ここでは分かりやすいように□で表示）
		}
		ele.innerHTML = ele.innerHTML + c;
	}
}, 1000);	// 画面の書き換え速度（リフレッシュ）。ここでは1秒ごとに書き換える

